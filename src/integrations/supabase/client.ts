
// Mock Supabase client for integration

export const supabase = {
  auth: {
    getSession: async () => ({ data: { session: null }, error: null }),
    getUser: async () => ({ data: { user: null }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signOut: async () => ({})
  },
  from: (table: string) => ({
    select: (columns?: string) => ({
      eq: (column: string, value: any) => ({
        order: (column: string, options?: { ascending?: boolean }) => ({
          data: [],
          error: null,
          filter: (column: string, operator: string, value: any) => ({
            data: [],
            error: null
          }),
          single: () => ({
            data: {},
            error: null
          }),
          maybeSingle: () => ({
            data: {},
            error: null
          }),
          match: (query: any) => ({
            data: [],
            error: null
          }),
          gte: (column: string, value: any) => ({
            data: [],
            error: null
          })
        }),
        filter: (column: string, operator: string, value: any) => ({
          data: [],
          error: null
        }),
        single: () => ({
          data: {},
          error: null
        }),
        maybeSingle: () => ({
          data: {},
          error: null
        })
      }),
      order: (column: string, options?: { ascending?: boolean }) => ({
        data: [],
        error: null
      }),
      filter: (column: string, operator: string, value: any) => ({
        data: [],
        error: null
      }),
      match: (query: any) => ({
        data: [],
        error: null
      }),
      gte: (column: string, value: any) => ({
        data: [],
        error: null
      }),
      single: () => ({
        data: {},
        error: null
      }),
      maybeSingle: () => ({
        data: {},
        error: null
      })
    }),
    insert: (data: any) => ({ 
      select: () => ({
        data: {},
        error: null
      }),
      error: null 
    }),
    update: (data: any) => ({
      eq: (column: string, value: any) => ({
        select: () => ({
          data: {},
          error: null
        }),
        data: {},
        error: null
      }),
      match: (query: any) => ({
        data: {},
        error: null
      }),
      select: () => ({
        data: {},
        error: null
      }),
      error: null
    }),
    delete: () => ({
      eq: (column: string, value: any) => ({
        data: [],
        error: null
      }),
      match: (query: any) => ({
        data: [],
        error: null
      })
    })
  }),
  functions: {
    invoke: async (name: string, options?: any) => ({ 
      data: { generated_text: "This is mock text generated by the API." },
      error: null 
    })
  },
  removeChannel: (channel: any) => {},
  channel: (name: string) => ({
    on: () => ({ subscribe: () => ({ subscription: { unsubscribe: () => {} } }) })
  })
};
